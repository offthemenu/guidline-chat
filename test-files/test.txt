  "/accounts":
    get:
      tags:
      - account
      operationId: list_accounts
      summary: List a site's accounts
      description: See the [Pagination Guide](/developers/guides/pagination.html)
        to learn how to use pagination in the API and Client Libraries.
      parameters:
      - "$ref": "#/components/parameters/ids"
      - "$ref": "#/components/parameters/limit"
      - "$ref": "#/components/parameters/order"
      - "$ref": "#/components/parameters/sort_dates"
      - "$ref": "#/components/parameters/filter_begin_time"
      - "$ref": "#/components/parameters/filter_end_time"
      - "$ref": "#/components/parameters/filter_account_email"
      - "$ref": "#/components/parameters/filter_account_subscriber"
      - "$ref": "#/components/parameters/filter_account_past_due"
      responses:
        '200':
          description: A list of the site's accounts.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AccountList"
        '400':
          description: Invalid or unpermitted parameter.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '404':
          description: Incorrect site ID.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
      x-code-samples:
      - lang: Node.js
        source: |
          const accounts = client.listAccounts({ params: { limit: 200 } })

          for await (const account of accounts.each()) {
            console.log(account.code)
          }
      - lang: Python
        source: |
          params = {"limit": 200}
          accounts = client.list_accounts(params=params).items()
          for account in accounts:
              print(account.code)
      - lang: ".NET"
        source: |
          var optionalParams = new ListAccountsParams()
          {
              Limit = 200
          };
          var accounts = client.ListAccounts(optionalParams);
          foreach(Account account in accounts)
          {
              Console.WriteLine(account.Code);
          }
      - lang: Ruby
        source: |
          params = {
            limit: 200
          }
          accounts = @client.list_accounts(params: params)
          accounts.each do |account|
            puts "Account: #{account.code}"
          end
      - lang: Java
        source: |
          QueryParams params = new QueryParams();
          params.setLimit(200); // Pull 200 records at a time
          Pager<Account> accounts = client.listAccounts(params);

          for (Account acct : accounts) {
              System.out.println(acct.getCode());
          }
      - lang: PHP
        source: |
          $options = [
            'params' => [
              'limit' => 200
            ]
          ];
          $accounts = $client->listAccounts($options);

          foreach($accounts as $account) {
            echo 'Account code: ' . $account->getCode() . PHP_EOL;
          }
      - lang: Go
        source: "listParams := &recurly.ListAccountsParams{\n\tSort:  recurly.String(\"created_at\"),\n\tOrder:
          recurly.String(\"desc\"),\n\tLimit: recurly.Int(200),\n}\naccounts, err
          := client.ListAccounts(listParams)\nif err != nil {\n\tfmt.Println(\"Unexpected
          error: %v\", err)\n\treturn\n}\n\nfor accounts.HasMore() {\n\terr := accounts.Fetch()\n\tif
          e, ok := err.(*recurly.Error); ok {\n\t\tfmt.Printf(\"Failed to retrieve
          next page: %v\", e)\n\t\tbreak\n\t}\n\tfor i, account := range accounts.Data()
          {\n\t\tfmt.Printf(\"Account %3d: %s, %s\\n\",\n\t\t\ti,\n\t\t\taccount.Id,\n\t\t\taccount.Code,\n\t\t)\n\t}\n}"
    post:
      tags:
      - account
      operationId: create_account
      summary: Create an account
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AccountCreate"
        required: true
      responses:
        '201':
          description: An account.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Account"
        '400':
          description: Bad request, perhaps invalid JSON?
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '404':
          description: Incorrect site ID.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '422':
          description: Invalid parameters or an error running the billing info verification
            transaction.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
      x-code-samples:
      - lang: Node.js
        source: |
          try {
            const accountCreate = {
              code: accountCode,
              firstName: 'Benjamin',
              lastName: 'Du Monde',
              preferredTimeZone: 'America/Chicago',
              address: {
                street1: '900 Camp St',
                city: 'New Orleans',
                region: 'LA',
                postalCode: '70115',
                country: 'US'
              }
            }
            const account = await client.createAccount(accountCreate)
            console.log('Created Account: ', account.code)
          } catch (err) {
            if (err instanceof recurly.errors.ValidationError) {
              // If the request was not valid, you may want to tell your user
              // why. You can find the invalid params and reasons in err.params
              console.log('Failed validation', err.params)
            } else {
              // If we don't know what to do with the err, we should
              // probably re-raise and let our web framework and logger handle it
              console.log('Unknown Error: ', err)
            }
          }
      - lang: Python
        source: |
          try:
              account_create = {
                  "code": account_code,
                  "first_name": "Benjamin",
                  "last_name": "Du Monde",
                  "preferred_time_zone": "America/Chicago",
                  "acquisition": {
                      "campaign": "podcast-marketing",
                      "channel": "social_media",
                      "subchannel": "twitter",
                      "cost": {"currency": "USD", "amount": 0.50},
                  },
                  "shipping_addresses": [
                      {
                          "nickname": "Home",
                          "street1": "1 Tchoupitoulas St",
                          "city": "New Orleans",
                          "region": "LA",
                          "country": "US",
                          "postal_code": "70115",
                          "first_name": "Aaron",
                          "last_name": "Du Monde",
                      }
                  ],
              }
              account = client.create_account(account_create)
              print("Created Account %s" % account)
          except recurly.errors.ValidationError as e:
              # If the request was invalid, you may want to tell your user
              # why. You can find the invalid params and reasons in e.error.params
              print("ValidationError: %s" % e.error.message)
              print(e.error.params)
      - lang: ".NET"
        source: |
          try
          {
              var accountReq = new AccountCreate()
              {
                  Code = accountCode,
                  FirstName = "Benjamin",
                  LastName = "Du Monde",
                  PreferredTimeZone = "America/Chicago",
                  Address = new Address()
                  {
                      City = "New Orleans",
                      Region = "LA",
                      Country = "US",
                      PostalCode = "70115",
                      Street1 = "900 Camp St."
                  }
              };
              Account account = client.CreateAccount(accountReq);
              Console.WriteLine($"Created account {account.Code}");
          }
          catch (Recurly.Errors.Validation ex)
          {
              // If the request was not valid, you may want to tell your user
              // why. You can find the invalid params and reasons in ex.Error.Params
              Console.WriteLine($"Failed validation: {ex.Error.Message}");
          }
          catch (Recurly.Errors.ApiError ex)
          {
              // Use ApiError to catch a generic error from the API
              Console.WriteLine($"Unexpected Recurly Error: {ex.Error.Message}");
          }
      - lang: Ruby
        source: |
          begin
            account_create = {
              code: account_code,
              first_name: "Benjamin",
              last_name: "Du Monde",
              preferred_time_zone: "America/Chicago",
              acquisition: {
                campaign: "podcast-marketing",
                channel: "social_media",
                subchannel: "twitter",
                cost: {
                  currency: "USD",
                  amount: 0.50
                }
              },
              shipping_addresses: [
                {
                  nickname: "Home",
                  street1: "1 Tchoupitoulas St",
                  city: "New Orleans",
                  region: "LA",
                  country: "US",
                  postal_code: "70115",
                  first_name: "Benjamin",
                  last_name: "Du Monde"
                }
              ]
            }
            account = @client.create_account(body: account_create)
            puts "Created Account #{account}"
          rescue Recurly::Errors::ValidationError => e
            # If the request was invalid, you may want to tell your user
            # why. You can find the invalid params and reasons in e.recurly_error.params
            puts "ValidationError: #{e.recurly_error.params}"
          end
      - lang: Java
        source: |
          try {
              AccountCreate accountReq = new AccountCreate();
              Address address = new Address();

              accountReq.setCode(accountCode);
              accountReq.setFirstName("Aaron");
              accountReq.setLastName("Du Monde");
              accountReq.setPreferredTimeZone("America/Chicago");

              address.setStreet1("900 Camp St.");
              address.setCity("New Orleans");
              address.setRegion("LA");
              address.setCountry("US");
              address.setPostalCode("70115");

              accountReq.setAddress(address);

              Account account = client.createAccount(accountReq);
              System.out.println("Created account " + account.getCode());
          } catch (ValidationException e) {
              // If the request was not valid, you may want to tell your user
              // why. You can find the invalid params and reasons in e.getError().getParams()
              System.out.println("Failed validation: " + e.getError().getMessage());
          } catch (ApiException e) {
              // Use ApiException to catch a generic error from the API
              System.out.println("Unexpected Recurly Error: " + e.getError().getMessage());
          }
      - lang: PHP
        source: |
          try {
              $account_create = [
                  "code" => $account_code,
                  "first_name" => "Douglas",
                  "last_name" => "DuMonde",
                  "preferred_time_zone" => "America/Chicago",
                  "shipping_addresses" => [
                      [
                          "first_name" => "Douglas",
                          "last_name" => "DuMonde",
                          "nickname" => "nola",
                          "street1" => "1 Tchoupitoulas",
                          "city" => "New Orleans",
                          "postal_code" => "70130",
                          "country" => "US"
                      ]
                  ]
              ];

              $account = $client->createAccount($account_create);

              echo 'Created Account:' . PHP_EOL;
              var_dump($account);
          } catch (\Recurly\Errors\Validation $e) {
              // If the request was not valid, you may want to tell your user
              // why. You can find the invalid params and reasons in err.params
              var_dump($e);
          } catch (\Recurly\RecurlyError $e) {
              // If we don't know what to do with the err, we should
              // probably re-raise and let our web framework and logger handle it
              var_dump($e);
          }
      - lang: Go
        source: "accountReq := &recurly.AccountCreate{\n\tCode:      &accountCode,\n\tFirstName:
          recurly.String(\"Isaac\"),\n\tLastName:  recurly.String(\"Du Monde\"),\n\tEmail:
          \    recurly.String(\"isaac@example.com\"),\n\tPreferredTimeZone: recurly.String(\"America/Los_Angeles\"),\n\tBillingInfo:
          &recurly.BillingInfoCreate{\n\t\tFirstName: recurly.String(\"Isaac\"),\n\t\tLastName:
          \ recurly.String(\"Du Monde\"),\n\t\tAddress: &recurly.AddressCreate{\n\t\t\tPhone:
          \     recurly.String(\"415-555-5555\"),\n\t\t\tStreet1:    recurly.String(\"400
          Alabama St.\"),\n\t\t\tCity:       recurly.String(\"San Francisco\"),\n\t\t\tPostalCode:
          recurly.String(\"94110\"),\n\t\t\tCountry:    recurly.String(\"US\"),\n\t\t\tRegion:
          \    recurly.String(\"CA\"),\n\t\t},\n\t\tNumber: recurly.String(\"4111111111111111\"),\n\t\tMonth:
          \ recurly.String(\"12\"),\n\t\tYear:   recurly.String(\"30\"),\n\t\tCvv:
          \   recurly.String(\"123\"),\n\t},\n}\n\naccount, err := client.CreateAccount(accountReq)\nif
          e, ok := err.(*recurly.Error); ok {\n\tif e.Type == recurly.ErrorTypeValidation
          {\n\t\tfmt.Printf(\"Failed validation: %v\", e)\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"Unexpected
          Recurly error: %v\", e)\n\treturn nil, err\n}\nfmt.Printf(\"Created Account:
          %s\", account.Id)"
